{"Name":"Sticky Header","Id":2152,"Alias":"stickyheader","Description":"\nA very simple library that allows you to stick any `View` as a header of a:\n\n - `ListView`\n - `RecyclerView`\n - `ScrollView`\n\n## Adding a Sticky Header\n\nTo stick a header to a list view, we just need a `ListView` and any `View` to use as the header:\n\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cFrameLayout \n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/layout_container\"\u003e\n        \u003cListView\n            android:id=\"@+id/listview\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\" /\u003e\n        \u003cFrameLayout\n            android:id=\"@+id/header\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"@dimen/max_height_header\"\n            android:background=\"@android:color/holo_blue_dark\"\u003e\n            \u003cTextView\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_gravity=\"center_horizontal|bottom\"\n                android:layout_marginBottom=\"10dp\"\n                android:text=\"Hello World!\"\n                android:textSize=\"25dp\" /\u003e\n        \u003c/FrameLayout\u003e\n    \u003c/FrameLayout\u003e\n\nOnce we have the layout inflated, we can use the `StickyHeaderBuilder` to attach the header to the list:\n\n    var listView = container.FindViewById\u003cListView\u003e(Resource.Id.listview);\n    StickyHeaderBuilder\n        .StickTo(listView)\n        .SetHeader(Resource.Id.header, container)\n        .SetMinHeight(250)\n        .Apply();\n\n## Using a Sticky Header Animator\n\nThere are various animations that can be used when transitioning the header. This is easily done with the `AnimatorBuilder` type. Some of the built in transitions are:\n\n - Scale\n - Translation\n - Fade\n - Parallax\n\nFor simple transitions, we can pass a delegate that returns an `AnimatorBuilder` to the `SetAnimator` method:\n\n    .SetAnimator(() =\u003e {\n        var image = View.FindViewById(Resource.Id.header_image);\n        return AnimatorBuilder\n          .Create()\n          .ApplyVerticalParallax(image);\n    })\n\nIf we need more complex transitions, we can inherit from `HeaderStickyAnimator`:\n\n\tpublic class IconActionBarAnimator : HeaderStickyAnimator\n\t{\n\t\tprivate readonly View homeActionBar;\n\t\tprivate readonly int layoutResource;\n\n\t\tpublic IconActionBarAnimator(Activity activity, int layoutResource)\n\t\t{\n\t\t\tthis.layoutResource = layoutResource;\n\t\t\tthis.homeActionBar = activity.FindViewById(Android.Resource.Id.Home);\n\t\t}\n\n\t\tpublic override AnimatorBuilder CreateAnimatorBuilder()\n\t\t{\n\t\t\tvar view = Header.FindViewById(layoutResource);\n\t\t\tvar rect = new RectangleF(\n\t\t\t\thomeActionBar.Left, homeActionBar.Top,\n\t\t\t\thomeActionBar.Right, homeActionBar.Bottom);\n\t\t\tvar point = new PointF(homeActionBar.Left, homeActionBar.Top);\n\t\t\treturn AnimatorBuilder\n\t\t\t\t.Create()\n\t\t\t\t.ApplyScale(view, rect)\n\t\t\t\t.ApplyTranslation(view, point);\n\t\t}\n\t}\n","Version":"1.1.1","Summary":"A very simple library that allows you to stick any View as a header of a ListView, RecyclerView or ScrollView.","QuickStart":"\n\nA very simple library that allows you to stick any `View` as a header of a:\n\n - `ListView`\n - `RecyclerView`\n - `ScrollView`\n\n## Adding a Sticky Header\n\nTo stick a header to a list view, we just need a `ListView` and any `View` to use as the header:\n\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cFrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/layout_container\"\u003e\n        \u003cListView\n            android:id=\"@+id/listview\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\" /\u003e\n        \u003cFrameLayout\n            android:id=\"@+id/header\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"@dimen/max_height_header\"\n            android:background=\"@android:color/holo_blue_dark\"\u003e\n            \u003cTextView\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_gravity=\"center_horizontal|bottom\"\n                android:layout_marginBottom=\"10dp\"\n                android:text=\"Hello World!\"\n                android:textSize=\"25dp\" /\u003e\n        \u003c/FrameLayout\u003e\n    \u003c/FrameLayout\u003e\n\nOnce we have the layout inflated, we can use the `StickyHeaderBuilder` to attach the header to the list:\n\n    var listView = container.FindViewById\u003cListView\u003e(Resource.Id.listview);\n    StickyHeaderBuilder\n        .StickTo(listView)\n        .SetHeader(Resource.Id.header, container)\n        .SetMinHeight(250)\n        .Apply();\n\n## Using a Sticky Header Animator\n\nThere are various animations that can be used when transitioning the header. This is easily done with the `AnimatorBuilder` type. Some of the built in transitions are:\n\n - Scale\n - Translation\n - Fade\n - Parallax\n\nFor simple transitions, we can pass a delegate that returns an `AnimatorBuilder` to the `SetAnimator` method:\n\n    .SetAnimator(() =\u003e {\n        var image = View.FindViewById(Resource.Id.header_image);\n        return AnimatorBuilder\n          .Create()\n          .ApplyVerticalParallax(image);\n    })\n\nIf we need more complex transitions, we can inherit from `HeaderStickyAnimator`:\n\n\tpublic class IconActionBarAnimator : HeaderStickyAnimator\n\t{\n\t\tprivate readonly View homeActionBar;\n\t\tprivate readonly int layoutResource;\n\n\t\tpublic IconActionBarAnimator(Activity activity, int layoutResource)\n\t\t{\n\t\t\tthis.layoutResource = layoutResource;\n\t\t\tthis.homeActionBar = activity.FindViewById(Android.Resource.Id.Home);\n\t\t}\n\n\t\tpublic override AnimatorBuilder CreateAnimatorBuilder()\n\t\t{\n\t\t\tvar view = Header.FindViewById(layoutResource);\n\t\t\tvar rect = new RectangleF(\n\t\t\t\thomeActionBar.Left, homeActionBar.Top,\n\t\t\t\thomeActionBar.Right, homeActionBar.Bottom);\n\t\t\tvar point = new PointF(homeActionBar.Left, homeActionBar.Top);\n\t\t\treturn AnimatorBuilder\n\t\t\t\t.Create()\n\t\t\t\t.ApplyScale(view, rect)\n\t\t\t\t.ApplyTranslation(view, point);\n\t\t}\n\t}\n\n","Hash":"f57990419be33697e578fb19178b1f54","TargetPlatforms":["android"],"TrialHash":null}